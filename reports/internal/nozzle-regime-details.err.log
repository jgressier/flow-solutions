Traceback (most recent call last):
  File "/home/runner/work/flow-solutions/flow-solutions/venv/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/work/flow-solutions/flow-solutions/venv/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/work/flow-solutions/flow-solutions/venv/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/work/flow-solutions/flow-solutions/venv/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/work/flow-solutions/flow-solutions/venv/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/work/flow-solutions/flow-solutions/venv/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
pos = .5                            # 0 to 1 parameter to control shock position
NPR = NPR0*(1.-pos)+NPRsw*pos
#
# this is the same computation as previous cell but it is repeated to make it self consistent
_Minit = .05 + (Noz_x > 1.)*2.   # set initial guess to .05 in convergent, 2. in diffuser
_M  = mf.Mach_Sigma(Noz_AoAc, Mach=_Minit)
#
# analytical solution for Ms
K      = NPR/target_AoAc/((defg._gamma+1.)/2)**((defg._gamma+1.)/2/(defg._gamma-1.))
Ms     = np.sqrt((np.sqrt(1.+2.*(defg._gamma-1.)*K*K)-1.)/(defg._gamma-1))
#
# computation of shock wave (losses and upsptream Mach number)
Ptloss = Is.PiPs_Mach(Ms)/NPR
Msh    = sw.Mn_Pi_ratio(Ptloss)
#
# redefine curves starting from 'ish' index (closest value of Msh in supersonic flow)
ish    = np.abs(_M-Msh).argmin()
_M[ish:] = mf.MachSub_Sigma(Noz_AoAc[ish:]*mf.Sigma_Mach(Ms)/target_AoAc)
_M  = np.append(_M, [Ms, Ms])  # add constant points
_Pt = np.append(0.*Noz_x + 1., [Ptloss, Ptloss]);
_Pt[ish:] = Ptloss
_Ps = _Pt/Is.PiPs_Mach(_M)
#
new_plot('$x$','Mach')
plt.plot(coord_x, _M)
------------------


[31m---------------------------------------------------------------------------[39m
[31mNameError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[11][39m[32m, line 2[39m
[32m      1[39m pos = [32m.5[39m                            [38;5;66;03m# 0 to 1 parameter to control shock position[39;00m
[32m----> [39m[32m2[39m NPR = [43mNPR0[49m*([32m1.[39m-pos)+NPRsw*pos
[32m      3[39m [38;5;66;03m#[39;00m
[32m      4[39m [38;5;66;03m# this is the same computation as previous cell but it is repeated to make it self consistent[39;00m
[32m      5[39m _Minit = [32m.05[39m + (Noz_x > [32m1.[39m)*[32m2.[39m   [38;5;66;03m# set initial guess to .05 in convergent, 2. in diffuser[39;00m

[31mNameError[39m: name 'NPR0' is not defined

